(define "PlaceNewGroup"
	(move Add
		(to 
			(sites Empty)
			if:(= 0
				(count Sites
					in:(sites Around (to) Own Orthogonal)
				)
			)
		)
		(then (set Var "Captured" 0))
	)
)

(define "Place"
	(if (!= 0 (count Pieces Mover))
		(do
			(move Add
				(to 
					(sites Around (sites Occupied by:Mover) Empty Orthogonal)
					(apply 
						(set Var "NumberOfFriendlyGroupsBeforePlacement"
							(count Groups Orthogonal if:(= (mover) (who at:(to))))
						)
					)
				)
				(then (set Var "Captured" 0))
			)
			ifAfterwards:(=
				(count Groups Orthogonal if:(= (mover) (who at:(to))))
				(var "NumberOfFriendlyGroupsBeforePlacement")
			)
		)
		("PlaceNewGroup")
	)
)

(define "Capture"
	(move
		(from 
			(sites Occupied by:Mover)
			if:(< 1 (size Group at:(from) Orthogonal if:(is Mover (who at:(to)))))
		)
		(to
			(sites Direction
				from:(from)
				Adjacent
				stop:(is Enemy (who at:(to)))
				stopIncluded:True
			)
			if:(and
				(< 1
					(size Group at:(to) Orthogonal if:(is Enemy (who at:(to))))
				)
				(= 0 
					(count Sites 
						in:(difference
							(sites Around (to) Own Orthogonal)
							(from)
						)
					)
				)
			)
			(apply
				(and
					(set Var "Captured" 1)
					(remove (sites Group at:(to) Orthogonal if:(is Enemy (who at:(to)))))
				)
			)
		)
		(then (moveAgain))
	)
)

(game "Encampments"
	(players 2)
	(equipment
		{
			(board (<Shape> <Board>))
			(piece "Disc" Each)
		}
	)
	(rules
		(meta (swap))
		(play
			(if
				(= 1 (var "Captured"))
				("PlaceNewGroup")
				(or
					("Place")
					("Capture")
				)
			)
		)
		(end 
			(if 
				(no Moves Mover) 
				(result Mover Win)
			)
		)
	)
)

(option "Board Size" <Board> args:{ <size> }
	{
	(item "3"    <3>  "A base 3 board is currently selected")
	(item "4"    <4>  "A base 4 board is currently selected")
	(item "5"    <5>  "A base 5 board is currently selected")
	(item "6"    <6>  "A base 6 board is currently selected")
	(item "7"    <7>  "A base 7 board is currently selected")
	(item "8"    <8>  "A base 8 board is currently selected")*
	(item "9"    <9>  "A base 9 board is currently selected") 
	(item "10"  <10>  "A base 10 board is currently selected") 
	(item "11"  <11>  "A base 11 board is currently selected") 
	(item "12"  <12>  "A base 12 board is currently selected") 
	}
)

(option "Board Shape" <Shape> args:{ <shape> }
	{
	(item "Hex" <hex> "A hex shaped board is currently selected")
	(item "Square" <square> "A square shaped board is currently selected")*
	}
)

(metadata
	(graphics {
		(player Colour P1 (colour Black))
		(player Colour P2 (colour White))
		(region Colour (sites Board) (colour 250 210 148))
		(board Colour InnerEdges (colour 178 151 100))
		(board Colour OuterEdges (colour 178 151 100))
	})
)